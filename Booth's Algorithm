.data
    size: .space 20 #allocates 20 bytes in memory
    multiplier:  .asciiz "                    " #initialize user string
    multiplicand:  .asciiz "                    " #initialize user string
    exceptionMessage: .asciiz "input error!"
    dashes: .asciiz "----------"
    space: .asciiz " "
    X: .asciiz "X"
    newLine: .asciiz "\n"

.text

main:
    #read user input
    li $v0, 8 # read user input as string
    la $a0, multiplicand #put input into input address
    li $a1, 20 #intialize size to 20
    syscall

    #read user input
    li $v0, 8 # read user input as string
    la $a0, multiplier #put input into input address
    li $a1, 20 #intialize size to 20
    syscall

    #exceptions
    #check if negative or positive (beq)
    #check if >10

 stringToInt:
#convert string to int
#print out binary of multiplicand /n x binary of multiplier  /n 10 dashes (-) /n

 boothsAlgorithm:
 #AQ will be stored in one register, right shift fo A
 #store Q-1 seperately
 #A
 #Q
 #Q-1
 #Q0Q-1
 #check for action
 	#2 -> A-M
 	#3&0 -> no change
 	#1 -> A+M
 #𝐴𝑄𝑄−1 after action
 #𝐴𝑄𝑄−1 after shift right
 #result=AQ

 #printing subroutine

 exception:
  #print_string
  li $v0, 4 
  la $a0, exceptionMessage # load output2
  syscall

  exit:
  # end program
  li $v0, 10      
  syscall
