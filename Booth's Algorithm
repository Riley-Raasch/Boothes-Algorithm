.data
    size: .space 20 #allocates 20 bytes in memory
    exceptionMessage: .asciiz "input error!"
    dashes: .asciiz "----------"
    space: .asciiz " "
    X: .asciiz "X"
    newLine: .asciiz "\n"

.text

main:
    jal stringToInt
    addi $s0, $v0, 0 #inputs first number into s0

    jal stringToInt
    addi $s1, $v0, 0 #inputs second number into s1

    li $v0, 4
    la $a0, space
    syscall #prints a space for formatting

    addi $a0, $s0, 0
    jal printBinary #prints binary for the first number

    li $v0, 4
    la $a0, newLine
    syscall #prints a newline for formatting

    li $v0, 4
    la $a0, X
    syscall #prints an x for formatting

    addi $a0, $s1, 0
    jal printBinary #prints binary for the second number

    li $v0, 4
    la $a0, newLine
    syscall #prints a newline for formatting

    li $v0, 4
    la $a0, dashes
    syscall #prints dashes for formatting

    addi $a0, $s0, 0 #loads first and second number into a0 and a1
    addi $a1, $s1, 0 #for booths algorithm
    jal boothsAlgorithm #jump and loads booths algorithm
    #store the halfs in v0, v1
    addi $s0, $v0, 0
    addi $s1, $v1, 0

    li $v1, 0
    li $v0, 4
    la $a0, newLine
    syscall #prints a newline for the final result

    li $v0, 4
    la $a0, dashes
    syscall #prints dashes before the final result

    li $v0, 4
    la $a0, newLine
    syscall #prints a newline

    li $v0, 4
    la $a0, space
    syscall #prints a space

    add $a0, $s0, $zero
    jal printBinary #prints the first half of the result (A)

    add $a0, $s1, $zero
    jal printBinary #prints the second half of the result (Q)

    li $v0, 4
    la $a0, newLine
    syscall #prints a newline at the end

    j exit #exits program


    #exceptions
    #check if negative or positive (beq)
    #check if >10

stringToInt:
    addi $v0, $zero, 8 #string input
    la $a0, size #store in size
    addi $a1, $zero, 20
    syscall #take input
    addi $t1, $a0, 0 #input is in t1

    addi $t3, $zero, 10 #newline
    addi $s2, $zero, 10 #base 10
    addi $s3, $zero, 0 #start of sum

    addi $t4, $zero, 45 #ascii for minus
    lb $t5, 0($t1) #loaded the first byte into t5
    bne $t5, $t4, sumPositive #checks if first byte is a minus sign
    addi $t1, $t1, 1 #moves string pointer to ignore the negative sign
    lb $t5, 0($t1) #loads next byte to check if string is valid
    beq $t5, $t3, exception #errors if value is only a negative sign
    j sumNegative

sumPositive:
    lb $t2, 0($t1) #loads first current byte
    beq $t2, $t3, summed #jumps if finds end of string
    addi $t2, $t2, -48 #converts ascii to int
    blt $t2, $zero, exception #errors if input is invalid ascii
    bge $t2, $s2, exception #errors if input is invalid ascii
    mul $s3, $s3, $s2 #shifts running total
    addu $s3, $s3, $t2 #adds to total
    blt $s3, $zero, exception #errors if overflow
    addi $t1, $t1, 1 #moves string pointer
    j sumPositive

sumNegative: 
    lb $t2, 0($t1) #loads current byte
    beq $t2, $t3, summed #jumps at the end of string
    addi $t2, $t2, -48 #converts ascii to int
    blt $t2, $zero, exception #errors if input is invalid ascii
    bge $t2, $s2, exception #errors if input is invalid ascii
    mul $s3, $s3, $s2 #shifts running total
    subu $s3, $s3, $t2 #subtracts from running total
    bgt $s3, $zero, exception #errors if overflow
    addi $t1, $t1, 1 #moves string pointer
    j sumNegative

summed:
    addi $v0, $s3, 0
    jr $ra

#convert string to int
#print out binary of multiplicand /n x binary of multiplier  /n 10 dashes (-) /n

boothsAlgorithm:
 addi $sp, $sp, -4
 sw $ra 0($sp) #stores the return address on the stack

 #AQ will be stored in one register, right shift fo A
 #store Q-1 seperately
 #count -> $t9
 addi $t9, $zero, 32 #counter
 addi $s2, $a0, 0 #M -> s2
 #A -> $s0
 add $s0, $zero, $zero
 #Q -> $s1
 add $s1, $a1, $zero
 #Q-1 -> $t1
 add $t1, $zero, $zero

 addi $t4, $zero, 1
 addi $t5, $zero, 2 #checks for action numbers

 lui $s6, 32768
 ori $s6, $s6, 0 #1, 0's

loop:
 #Q0Q-1 -> $t2
 andi $t2, $s1, 1
 sll $t2, $t2, 1
 add $t2, $t2, $t1 #calculates q0q1 as if its a number

 beq $t9, 0, done #breaks after 32
 #check for action
 beq $t2, $t5, subtract
 beq $t2, $t4, addition
 j shiftRight

subtract:
sub $s0, $s0, $s2 #A-M
j shiftRight
addition:
add $s0, $s0, $s2 #A+M
j shiftRight

shiftRight:
# change values of A & Q
#right most bit
andi $t0, $s0, 1 #stores rightmost bit in t0
andi $t1, $s1, 1 #stores rightomst bit in t1

sra $s0, $s0, 1 #shift right A
srl $s1, $s1, 1 #shift right Q

mul $t0, $t0, $s6

addu $s1, $s1, $t0 #adds the rightmost bit to the lower half

#newline
    li $v0, 4
    la $a0, newLine
    syscall

#space
    li $v0, 4
    la $a0, space
    syscall

#print A
add $a0, $s0, $zero
jal printBinary

#print Q
add $a0, $s1, $zero
jal printBinary

addi $t9, $t9, -1
j loop

done:
lw $ra, 0($sp)
addi $ra, $ra, 4

addi $v0, $s0, 0
addi $v1, $s1, 0

jr $ra

printBinary: #take in a0 and print binary
    addi $sp, $sp, -12
    sw $t0, 0($sp)
    sw $t1, 4($sp)
    sw $t2, 8($sp)

    addi $t0, $a0, 0


    addi $t1, $zero, 32
    lui $t2, 32768
    ori $t2, $t2, 0

circle:
    and $a0, $t0, $t2
    divu $a0, $a0, $t2
    li $v0, 1
    syscall

    addi $t1, $t1, -1
    sll $t0, $t0, 1
    bne $t1, $zero, circle
    lw $t0, 0($sp)
    lw $t1, 4($sp)
    lw $t2, 8($sp)
    addi $sp, $sp, 12
    jr $ra

exception:
    #print_string
    li $v0, 4 
    la $a0, exceptionMessage # load output2
    syscall

exit:
    # end program
    li $v0, 10      
    syscall
